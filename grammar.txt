start
  = ws? statements

ws
  = [ \r\n]+

statements
    = statements:(statement ws?)* { return {type:'statements',statements:statements.map(function(a){return a[0];})} }

statement
  = output

output
  = outputIndicator expression:expression { return {type:'output',value:expression} }

outputIndicator
  = "DUDE," ws "CHECK" ws "OUT" ws

expression
  = additive

additive
  = left:multiplicative ws? op:[-+] ws? right:additive { return {type:'binaryop',op:op,left:left,right:right} }
  / value:multiplicative

multiplicative
  = left:primary ws? op:[*/] ws? right:multiplicative { return {type:'binaryop',op:op,left:left,right:right} }
  / value:primary

primary
  = "(" ws? value:expression ws? ")" { return {type:'parenthesis',value:value} }
  / unary

unary
  = "-" primary:primary  { return {type:'unaryop',op:'-',value:primary} }
  / simple

simple
  = function
  / identifier
  / literal

literal
  = string
  / float
  / int

identifier
  = name:[a-zA-Z]+ { return {type:'identifier',name:name.join('')} }

string
  = '"' literal:[^"]+ '"'  { return {type:'string',value:literal.join("")} }
  / "'" literal:[^']+ "'"  { return {type:'string',value:literal.join("")} }

int
  = value:[0-9]+ { return {type:'int',value:value.join('')} }

float
  = value:([0-9]* "." [0-9]+) { return {type:'float',value:value[0].join('')+"."+value[2].join('')} }

function
  = "WITH" ws? parameters:("(" parameters ")" ws?)? "LETS" ws statements:statements "PEACE" { return {type:'function',parameters:parameters[1],statements:statements} }

parameters
  = first:identifier rest:(ws? "," ws? identifier)* ws? { var result = rest.map(function (other) { return other[3].name }); result.splice(0,0,first.name); return result; }
